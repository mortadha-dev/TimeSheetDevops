 pipeline {
     agent any
      tools {
         maven 'MAVEN_HOME'
       }
         environment {
         registry = "mortadha123/timesheetdevops"
         registryCredential = 'Docker'
         dockerImage = ''
     }


     stages {

      stage("Lancer les tests unitaires") {
       steps {
         script {
             bat "mvn test "
         }
     }
 }




         stage('Mettre livrable dossier target') {
             steps {
               bat 'mvn -f pom.xml clean install '
                   }
                           }



         stage('Lancer les analyses de SonarQube') {
            steps {

                     withSonarQubeEnv('sonarqube1')
                       {
                               bat 'mvn sonar:sonar'
                       }
                   }
         }


      stage("push to Nexus") {
             steps {


         nexusArtifactUploader artifacts:[

             [
                 artifactId: 'Timesheet-spring-boot-core-data-jpa-mvc-REST-1',
                 classifier: '',
                 file: 'target/Timesheet-spring-boot-core-data-jpa-mvc-REST-1-0.0.1-SNAPSHOT.jar',
                 type: 'jar'
                 ]
             ],

             credentialsId: 'nexus3',
             groupId: 'tn.esprit.spring',
             nexusUrl: 'localhost:8081',
             nexusVersion: 'nexus3',
             protocol: 'http',
             repository: 'TimeSheetApp',
             version: '0.0.1-SNAPSHOT'


             }
         }
          stage('Build image docker') {
                      steps {
                          script {
                              dockerImage = docker.build registry + ":$BUILD_NUMBER"
                          }
                      }
                  }

             stage('push image to DockerHub') {
             steps {
                 script {
                     docker.withRegistry( '', registryCredential ) {
                         dockerImage.push()
                     }
                 }
             }
         }

 }

     post {
     always{
     cleanWs()
     }
      failure {
              mail bcc: '', body: "Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "mortadha.bouallagui1@esprit.tn";
          }
     }


     }