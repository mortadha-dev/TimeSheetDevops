pipeline {
    agent any
triggers {
        pollSCM('H/15 * * * *')
    }

    environment {
        registry = "sondes123/imesheetdevops"
        registryCredential = 'DockerHub'
        dockerImage = ''
    }
    stages {

     stage("Lancer les tests unitaires") {
      steps {
        script {
            bat "mvn test "
        }
    }
}

        stage('package') {
            steps {
                bat 'mvn package'
            }
        }
      stage("publier le livrable sous nexus") {
            steps {


        nexusArtifactUploader artifacts:[

            [
                artifactId: 'Timesheet-spring-boot-core-data-jpa-mvc-REST-1',
                classifier: '',
                file: 'target/Timesheet-spring-boot-core-data-jpa-mvc-REST-1-0.0.1-SNAPSHOT.jar',
                type: 'jar'
                ]
            ],

            credentialsId: 'nexusCredits',
            groupId: 'tn.esprit.spring',
            nexusUrl: 'localhost:8081',
            nexusVersion: 'nexus3',
            protocol: 'http',
            repository: 'devops',
            version: '0.0.1-SNAPSHOT'


            }
        }
     stage('SonarQube') {
           steps {

                    withSonarQubeEnv('sonar')
                      {
                              bat 'mvn sonar:sonar'
                      }
                  }
        }

     stage('Deploy Image') {
  steps{
    script {
     dockerImage = docker.build registry + ":$BUILD_NUMBER"
      docker.withRegistry( '', registryCredential ) {
        dockerImage.push()
      }
    }
  }
}


      stage('Ok') {
            steps {
                echo "Ok"
            }
        }
    }
    post {
        always {
            emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
        }
    }



}